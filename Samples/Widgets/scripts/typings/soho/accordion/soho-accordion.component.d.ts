/// <reference path="soho-accordion.d.ts" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList } from '@angular/core';
import { SohoAccordionHeaderComponent } from './soho-accordion-header.component';
import { SohoAccordionPaneComponent } from './soho-accordion-pane.component';
export declare class SohoAccordionComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    headers: QueryList<SohoAccordionHeaderComponent>;
    panes: QueryList<SohoAccordionPaneComponent>;
    options: SohoAccordionOptions;
    private jQueryElement;
    private accordion;
    private updateRequired;
    beforeexpandEvent: EventEmitter<any>;
    beforecollapseEvent: EventEmitter<any>;
    beforeselectEvent: EventEmitter<any>;
    selectedEvent: EventEmitter<any>;
    followlinkEvent: EventEmitter<any>;
    expandEvent: EventEmitter<any>;
    afterexpandEvent: EventEmitter<any>;
    collapseEvent: EventEmitter<any>;
    aftercollapseEvent: EventEmitter<any>;
    allowOnePane: boolean;
    displayChevron: boolean;
    rerouteOnLinkClick: boolean;
    source: Function;
    hasPanels: boolean;
    inverse: boolean;
    alternate: boolean;
    enableTooltips: boolean;
    hasSubheaderSeparators: boolean;
    constructor(element: ElementRef, ngZone: NgZone);
    getHeader(index: number): SohoAccordionHeaderComponent;
    expand(header: SohoAccordionHeaderComponent): void;
    collapse(header: SohoAccordionHeaderComponent): void;
    expandAll(): void;
    collapseAll(): void;
    disable(): void;
    enable(): void;
    isDisabled(header: SohoAccordionHeaderComponent): boolean;
    isExpanded(header: SohoAccordionHeaderComponent): boolean;
    toggle(header: SohoAccordionHeaderComponent): void;
    updated(headers?: JQuery[], settings?: SohoAccordionOptions): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private markForUpdate;
}
